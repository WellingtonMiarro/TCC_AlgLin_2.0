programa
{
	funcao inicio()
	{
		escreva("ATENÇÃO! Somente para ordem 2 como exemplo")
		escreva("\n\n")

				inteiro i, j
				real matriz2[2][2]
				
				para (i = 0; i < 2; i++)
				{
					para (j = 0; j < 2; j++)
					{
						escreva("\n\nDigite o elemento m", i + 1, j + 1, " da matriz M: ")
						leia(matriz2[i][j]) 
					}
				}

				real matrizinicial[2][2]
				
				para (i = 0; i < 2; i++)
				{
					para (j = 0; j < 2; j++)
					{
						matrizinicial[i][j] = matriz2[i][j]//esse "matrizinicial" serve para guardar os valores de entrada, pra utilizar nas operações
					}
				}

				escreva("\n\nMatriz M\n\n")
				para (i = 0; i < 2; i++)//i < 2 na generalização para qualquer ordem seria algo como lenght ou size da matriz, que tem q retornar a ordem dela. Será fácil pegar esse valor a partir da entrada do usuário no início
				{
					para (j = 0; j < 2; j++)
					{
						escreva("[", matriz2[i][j], "]")
					}
					escreva("\n")
				}

				escreva("\n\nAEG ou AGJ ida")
				inteiro cont

				para(cont = 0; cont < 1; cont++) //Como é ordem 2, cont > 1 quer dizer "vai até a penúltima linha, esse "1" é o tamanho da matriz, deveter algum comando "lenght" ou "size" que gneraliza esse 1
				{
					real pivo = matriz2[cont][cont]
					para (i = cont+1; i < 2; i++)//cont + 1 quer dizer "alguma linha abaixo do pivô que vou zerar o elemento da coluna do pivô"
					{
						escreva("\n\nL", i + 1, " = ", pivo,"L", i + 1, " - ", matriz2[i][cont],"L", cont + 1)
						
						real eliminando = matriz2[i][cont]//enquanto "pivo" é a variável q guarda o valor de referência para zerar os outros abaixo dele (nesse caso da "ida"), "eliminando" é exatamente o valor q vai zerar na multiplicação cruzada e posterior subtração
						
						para (j = 0; j < 2; j++)
						{
							matriz2[i][j] = pivo*matriz2[i][j] - eliminando*matriz2[cont][j] //Do artigo SIMPOCOMP e da teoria q vcs estudaram comigo e com Vini: |||Li <- pivô * Li - elimiminando * Lj|||, onde j representa a linha do pivô
						}
					}
					escreva("\n\nMatriz M\n\n")
					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 2; j++)
						{
							escreva("[", matriz2[i][j], "]")
						}
						escreva("\n")
					}
					
				}

				escreva("\n\nKernel - AGJ volta") //Confesso q estou confuso na "volta". Pra ordem 2 funcionou, mas pra ordem 3 algo não está batendo. Peço pra vcs analisarem
				
				para(cont = 1; cont > 0; cont--)//cont = 1 vai virar cont = ordem da matriz de entrada
				{
					real pivo = matriz2[cont][cont]
					para (i = cont-1; i >= 0; i--)//cont -1 quer dizer "alguma linha acima do pivô que vou zerar..."
					{
						escreva("\n\nL", i + 1, " = ", pivo,"L", i + 1, " - ", matriz2[i][cont],"L", cont + 1)
						
						real eliminando = matriz2[i][cont]//enquanto "pivo" é a variável q guarda o valor de referência para zeras os outros acima dele (nesse caso da "volta"), "eliminando" é exatamente o valor q vai zerar na multiplicação cruzada e posterior subtração
						
						para (j = 0; j < 2; j++)
						{
							matriz2[i][j] = pivo*matriz2[i][j] - eliminando*matriz2[cont][j]//Do artigo SIMPOCOMP e da teoria q vcs estudaram comigo e com Vini: |||Li <- pivô * Li - elimiminando * Lj|||, onde j representa a linha do pivô
						}
					}
					escreva("\n\nMatriz M\n\n")
					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 2; j++)
						{
							escreva("[", matriz2[i][j], "]")
						}
						escreva("\n")
					}
					
				}

				//Normalizando os vetores da matriz diagonal

				para(i = 0; i < 2; i++)//i < 2 vai virar i < ordem da matriz
				{	
					real norm = matriz2[i][i]//pq os elementos a diagonal principal estão sempre na mesma ordem de linha do que de coluna! Elementos m11, m22, m33, etc.
					para(j = 0; j  < 2; j++)// j < 2 vai virar...
					{
						se (norm != 0)
						{
							matriz2[i][j] = matriz2[i][j] / norm// "se(norm != 0)" evita divisões por zero. Acredito que devem fazer o mesmo com "pivo" e "eliminando". Onde o candidato a pivô é zero, ou pulamos a etapa (com esse teste "se(variável != 0)", ou trcamos as linhas de lugar, com o objetivo de o pivô não ser nulo, o que não é difícil fazer!	
						}

					}	
				}

				escreva("\n\nMatriz M normalizada = I\n\n")
				para (i = 0; i < 2; i++)
				{
					para (j = 0; j < 2; j++)
					{
						escreva("[", matriz2[i][j], "]")
					}
					escreva("\n")
				}

				inteiro opt

				escreva("\n\n Escolha qual operação fazer\n1) Resolver sistema linear\n2) Calcular o determinante\n3) obter a matriz inversa\n")
				leia(opt)

				se (opt == 1)
				{
					escreva("\n\nAqui consideramos que os coeficientes digitados por você são do sistema linear\n\n")
					para (i = 0; i < 2; i++)
					{
						escreva("{", matrizinicial[i][0], "x + ", matrizinicial[i][1], "y = s", i + 1)
						escreva("\n")
					}
					escreva("\n\nOnde s1, s2, ... são respostas de cada equação do sistema")

					real resp[2] //vetor q vai receber s1, s2, ... digitado pelo usuário
					
					para (i = 0; i < 2; i++)
					{
						escreva("\n\nDigite s", i + 1, ": ")
						leia(resp[i])	
					}
					
					//Montando matriz completa: acrescentar uma coluna [s1, s2, ...] na matriz inicial
					real matrizcompletasistlin[2][3]

					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 3; j++)
						{	
							se (j < 2)
							{
								matrizcompletasistlin[i][j] = matrizinicial[i][j]
							}
							senao
							{
								matrizcompletasistlin[i][j] = resp[i]
							}
						}
					}

					escreva("\n\nMatriz completa = I\n\n")
				
					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 3; j++)
						{
							escreva("[", matrizcompletasistlin[i][j], "]")
						}
						escreva("\n")
					}

				escreva("\n\nAEG ou AGJ ida")
				
				para(cont = 0; cont < 1; cont++) //Como é ordem 2, cont > 1 quer dizer "vai até a penúltima linha, esse "1" é o tamanho da matriz, deveter algum comando "lenght" ou "size" que gneraliza esse 1
				{
					real pivo = matrizcompletasistlin[cont][cont]
					para (i = cont+1; i < 2; i++)//cont + 1 quer dizer "alguma linha abaixo do pivô que vou zerar o elemento da coluna do pivô"
					{
						escreva("\n\nL", i + 1, " = ", pivo,"L", i + 1, " - ", matrizcompletasistlin[i][cont],"L", cont + 1)
						
						real eliminando = matrizcompletasistlin[i][cont]//enquanto "pivo" é a variável q guarda o valor de referência para zerar os outros abaixo dele (nesse caso da "ida"), "eliminando" é exatamente o valor q vai zerar na multiplicação cruzada e posterior subtração
						
						para (j = 0; j < 3; j++)// j < ordem da matriz + 1 coluna
						{
							matrizcompletasistlin[i][j] = pivo*matrizcompletasistlin[i][j] - eliminando*matrizcompletasistlin[cont][j] //Do artigo SIMPOCOMP e da teoria q vcs estudaram comigo e com Vini: |||Li <- pivô * Li - elimiminando * Lj|||, onde j representa a linha do pivô
						}
					}
				}

				escreva("\n\nMatriz completa\n\n")
					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 3; j++)
						{
							escreva("[", matrizcompletasistlin[i][j], "]")
						}
						escreva("\n")
					}

				escreva("\n\nKernel - AGJ volta") //Confesso q estou confuso na "volta". Pra ordem 2 funcionou, mas pra ordem 3 algo não está batendo. Peço pra vcs analisarem
				
				para(cont = 1; cont > 0; cont--)//cont = 1 vai virar cont = ordem da matriz de entrada
				{
					real pivo = matrizcompletasistlin[cont][cont]
					para (i = cont-1; i >= 0; i--)//cont -1 quer dizer "alguma linha acima do pivô que vou zerar..."
					{
						escreva("\n\nL", i + 1, " = ", pivo,"L", i + 1, " - ", matrizcompletasistlin[i][cont],"L", cont + 1)
						
						real eliminando = matrizcompletasistlin[i][cont]//enquanto "pivo" é a variável q guarda o valor de referência para zeras os outros acima dele (nesse caso da "volta"), "eliminando" é exatamente o valor q vai zerar na multiplicação cruzada e posterior subtração
						
						para (j = 0; j < 3; j++)// j = ordem da mateiz + 1 coluna
						{
							matrizcompletasistlin[i][j] = pivo*matrizcompletasistlin[i][j] - eliminando*matrizcompletasistlin[cont][j]//Do artigo SIMPOCOMP e da teoria q vcs estudaram comigo e com Vini: |||Li <- pivô * Li - elimiminando * Lj|||, onde j representa a linha do pivô
						}
					}
					escreva("\n\nMatriz completa\n\n")
					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 3; j++)
						{
							escreva("[", matrizcompletasistlin[i][j], "]")
						}
						escreva("\n")
					}
					
				}

				//Normalizando os vetores da matriz diagonal

				para(i = 0; i < 2; i++)//i < 2 vai virar i < ordem da matriz
				{	
					real norm = matrizcompletasistlin[i][i]//pq os elementos a diagonal principal estão sempre na mesma ordem de linha do que de coluna! Elementos m11, m22, m33, etc.
					para(j = 0; j  < 3; j++)// j < 3 vai virar j < qtde de colunas da matriz completa
					{
						se (norm != 0)
						{
							matrizcompletasistlin[i][j] = matrizcompletasistlin[i][j] / norm// "se(norm != 0)" evita divisões por zero. Acredito que devem fazer o mesmo com "pivo" e "eliminando". Onde o candidato a pivô é zero, ou pulamos a etapa (com esse teste "se(variável != 0)", ou trcamos as linhas de lugar, com o objetivo de o pivô não ser nulo, o que não é difícil fazer!	
						}
					}	
				}

				escreva("\n\nMatriz completa final\n\n")
				para (i = 0; i < 2; i++)
				{
					para (j = 0; j < 3; j++)
					{
						escreva("[", matrizcompletasistlin[i][j], "]")
					}
					escreva("\n")
				}

				escreva("\n\nResposta: x = ", matrizcompletasistlin[0][2], ", y = ", matrizcompletasistlin[1][2], "\n")
			}
			senao se (opt == 2)
			{
			  	escreva("\n\nBasta escalonar a matriz quadrada (AEG), até virar uma matriz triangular inferior")
			  	escreva("\n\nO determinante será a multiplicação dos elementos da diagonal principal")
			  	escreva("No entanto, estamos utilizando uma equação normalizada pelo pivô, ou seja,\n\n a cada interação devemos dividir pelo pivô anterior, o que resulta no determinante\n\nigual ao último valor da diagonal principal")
			  	escreva("\n\nCalculando o determinante por triangulação: M = \n\n")
			  	para (i = 0; i < 2; i++)
				{
					para (j = 0; j < 2; j++)
					{
						escreva("[", matrizinicial[i][j], "]")
					}
					escreva("\n")
				}

				//Montando matriz det

				real matrizdet[2][2]
				para (i = 0; i < 2; i++)
				{
					para (j = 0; j < 2; j++)
					{
						matrizdet[i][j] = matrizinicial[i][j]
					}
				}
				
				escreva("\n\nAEG ou AGJ ida")
				
				para(cont = 0; cont < 1; cont++) //Como é ordem 2, cont > 1 quer dizer "vai até a penúltima linha, esse "1" é o tamanho da matriz, deveter algum comando "lenght" ou "size" que gneraliza esse 1
				{
					real pivo = matrizdet[cont][cont]
					para (i = cont+1; i < 2; i++)//cont + 1 quer dizer "alguma linha abaixo do pivô que vou zerar o elemento da coluna do pivô"
					{
						escreva("\n\nL", i + 1, " = ", pivo,"L", i + 1, " - ", matrizdet[i][cont],"L", cont + 1)
						
						real eliminando = matrizdet[i][cont]//enquanto "pivo" é a variável q guarda o valor de referência para zerar os outros abaixo dele (nesse caso da "ida"), "eliminando" é exatamente o valor q vai zerar na multiplicação cruzada e posterior subtração
						
						para (j = 0; j < 2; j++)
						{
							matrizdet[i][j] = pivo*matrizdet[i][j] - eliminando*matrizdet[cont][j] //Do artigo SIMPOCOMP e da teoria q vcs estudaram comigo e com Vini: |||Li <- pivô * Li - elimiminando * Lj|||, onde j representa a linha do pivô
						}
					}
					escreva("\n\nMatriz escalonada\n\n")
					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 2; j++)
						{
							escreva("[", matrizdet[i][j], "]")
						}
						escreva("\n")
					}
					escreva("\n\nDeterminante = ", matrizdet[1][1], "\n")//[1][1] vai virar [ordem][ordem]					
				}
			}
			senao se (opt == 3)
			{
				escreva("\n\nPara inverter uma matriz, vamos utilizar AGJ e uma matriz identidade")
				escreva("\n\nMatriz completa\n\n")

				//Montando matriz completa para inversão de matriz
				real matrizcompletainv[2][4]// 4 aqui quer dizer "o dobro da ordem da matriz"
				para(i = 0; i < 2; i++)//i < 2 vai virar i < ordem
				{
					para(j = 0; j < 4; j++)//j = 4 vem de j = dobro de i, pois agregaremos uma matriz identidade á direita da matriz original, gerando uma matriz completa i x 2*i
					{
						se(j < 2) matrizcompletainv[i][j] = matrizinicial[i][j]
						senao
						{
							//o condicional abaixo é ref a uma matriz identidade
							se(i == j - 2) matrizcompletainv[i][j] = 1.0//j - 2 quer dizer j - ordem da matriz de entrada
							senao matrizcompletainv[i][j] = 0.0
						}
					}
				}

				escreva("\n\nMatriz escalonada\n\n")
				para (i = 0; i < 2; i++)
				{
					para (j = 0; j < 4; j++)
					{
						escreva("[",  matrizcompletainv[i][j], "]")
					}
					escreva("\n")
				}

				escreva("\n\nAEG ou AGJ ida")

				para(cont = 0; cont < 1; cont++) //Como é ordem 2, cont > 1 quer dizer "vai até a penúltima linha, esse "1" é o tamanho da matriz, deveter algum comando "lenght" ou "size" que gneraliza esse 1
				{
					real pivo = matrizcompletainv[cont][cont]
					para (i = cont+1; i < 2; i++)//cont + 1 quer dizer "alguma linha abaixo do pivô que vou zerar o elemento da coluna do pivô"
					{
						escreva("\n\nL", i + 1, " = ", pivo,"L", i + 1, " - ", matrizcompletainv[i][cont],"L", cont + 1)
						
						real eliminando = matrizcompletainv[i][cont]//enquanto "pivo" é a variável q guarda o valor de referência para zerar os outros abaixo dele (nesse caso da "ida"), "eliminando" é exatamente o valor q vai zerar na multiplicação cruzada e posterior subtração
						
						para (j = 0; j < 4; j++)//j = 4 é o mesmo que j = dobro da qtde de linhas, ou ordem da matriz de entrada
						{
							matrizcompletainv[i][j] = pivo*matrizcompletainv[i][j] - eliminando*matrizcompletainv[cont][j] //Do artigo SIMPOCOMP e da teoria q vcs estudaram comigo e com Vini: |||Li <- pivô * Li - elimiminando * Lj|||, onde j representa a linha do pivô
						}
					}
					escreva("\n\nMatriz completa\n\n")
					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 4; j++)
						{
							escreva("[", matrizcompletainv[i][j], "]")
						}
						escreva("\n")
					}
					
				}

				escreva("\n\nAGJ volta") //Confesso q estou confuso na "volta". Pra ordem 2 funcionou, mas pra ordem 3 algo não está batendo. Peço pra vcs analisarem
				
				para(cont = 1; cont > 0; cont--)//cont = 1 vai virar cont = ordem da matriz de entrada, menos 1 (linha do pivô sempre acima, na ida)
				{
					real pivo = matrizcompletainv[cont][cont]
					para (i = cont-1; i >= 0; i--)//cont -1 quer dizer "alguma linha acima do pivô que vou zerar..."
					{
						escreva("\n\nL", i + 1, " = ", pivo,"L", i + 1, " - ", matrizcompletainv[i][cont],"L", cont + 1)
						
						real eliminando = matrizcompletainv[i][cont]//enquanto "pivo" é a variável q guarda o valor de referência para zeras os outros acima dele (nesse caso da "volta"), "eliminando" é exatamente o valor q vai zerar na multiplicação cruzada e posterior subtração
						
						para (j = 0; j < 4; j++)//Lembrando: na matriz inversa j = 2*i = 2*ordem
						{
							matrizcompletainv[i][j] = pivo*matrizcompletainv[i][j] - eliminando*matrizcompletainv[cont][j]//Do artigo SIMPOCOMP e da teoria q vcs estudaram comigo e com Vini: |||Li <- pivô * Li - elimiminando * Lj|||, onde j representa a linha do pivô
						}
					}
					escreva("\n\nMatriz completa\n\n")
					para (i = 0; i < 2; i++)
					{
						para (j = 0; j < 4; j++)
						{
							escreva("[", matrizcompletainv[i][j], "]")
						}
						escreva("\n")
					}
					
				}

				//Normalizando os vetores da matriz diagonal

				para(i = 0; i < 2; i++)//i < 2 vai virar i < ordem da matriz
				{	
					real norm = matrizcompletainv[i][i]//pq os elementos a diagonal principal estão sempre na mesma ordem de linha do que de coluna! Elementos m11, m22, m33, etc.
					para(j = 0; j < 4; j++)
					{
						se (norm != 0)
						{
							matrizcompletainv[i][j] = matrizcompletainv[i][j] / norm// "se(norm != 0)" evita divisões por zero. Acredito que devem fazer o mesmo com "pivo" e "eliminando". Onde o candidato a pivô é zero, ou pulamos a etapa (com esse teste "se(variável != 0)", ou trcamos as linhas de lugar, com o objetivo de o pivô não ser nulo, o que não é difícil fazer!	
						}

					}	
				}

				escreva("\n\nMatriz completa final\n\n")
				para (i = 0; i < 2; i++)
				{
					para (j = 0; j < 4; j++)
					{
						escreva("[", matrizcompletainv[i][j], "]")
					}
					escreva("\n")
				}

				escreva("\n\nA inversa de M é: \n\n")
				para (i = 0; i < 2; i++)
				{
					para (j = 2; j < 4; j++)//escrevendo só a parte da matriz inversa!
					{
						escreva("[", matrizcompletainv[i][j], "]")
					}
					escreva("\n")
				}
			}
			senao
			{
				escreva("\n\nSomente opções 1, 2 ou 3")
			}
	}
}
